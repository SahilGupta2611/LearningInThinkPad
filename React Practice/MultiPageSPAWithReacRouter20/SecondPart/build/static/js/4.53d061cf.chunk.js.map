{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","param","useParams","getAllComments","loadedComments","data","addCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","match","useRouteMatch","console","log","path","url","exact","to"],"mappings":"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","file":"static/js/4.53d061cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1XiTU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__38blK\",\"loading\":\"NewCommentForm_loading__3LAoB\",\"control\":\"NewCommentForm_control__P3wWo\",\"actions\":\"NewCommentForm_actions__2HRXI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3UMPt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__pZLgL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3wRxr\"};","import { useEffect, useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../../components/comments/CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const param = useParams();\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n  } = useHttp(getAllComments, true);\n\n  const { quoteId } = param;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, []);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = (\n      <div className=\"centered\">\n        <CommentsList comments={loadedComments} />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments.length === 0) {\n    comments = <p className=\"centered\">No Comments added yet.</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm onAddedComment={addCommentHandler} quoteId={quoteId} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nfunction QuoteDetail(props) {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p className=\"centered\"> {error}</p>;\r\n  }\r\n  if (!loadedQuote.text) {\r\n    return <p className=\"centered\">No Quote Found...</p>;\r\n  }\r\n  console.log(loadedQuote);\r\n  console.log(match.path); //=> /Quotes/:quoteId\r\n  console.log(match.url); //=> /Quotes/q2\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/Comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      {/* Below Commented will also works */}\r\n      {/* <Route path=\"/Quotes/:quoteId/comments\">\r\n        <Comments />\r\n      </Route> */}\r\n\r\n      <Route path={`${match.path}/Comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}